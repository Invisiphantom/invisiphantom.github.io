[{"title":"Code-Palace 各种数据类型在当前系统的存储","url":"/2023/01/22/Code-Palace%20%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%9C%A8%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%98%E5%82%A8/","content":"#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;float.h&gt;#include &lt;limits.h&gt;#include &lt;inttypes.h&gt;#define ONE 1#define FIFTEEN 15#define SEVENTY_NINE 79int main() &#123;    printf(&quot;One byte = %d bits on this system.\\n\\n&quot;, CHAR_BIT);    printf(&quot;char has a size of %zd byte.\\n&quot;, sizeof(char));    printf(&quot;Smallest char: %hhd\\n&quot;, CHAR_MIN);    printf(&quot;Biggest char: %hhd\\n&quot;, CHAR_MAX);    printf(&quot;Biggest unsigned char: %hhu\\n\\n&quot;, UCHAR_MAX);    printf(&quot;short has a size of %zd bytes.\\n&quot;, sizeof(short));    printf(&quot;Smallest short: %hd\\n&quot;, SHRT_MIN);    printf(&quot;Biggest short: %hd\\n&quot;, SHRT_MAX);    printf(&quot;Biggest unsigned short: %hu\\n\\n&quot;, USHRT_MAX);    printf(&quot;int has a size of %zd bytes.\\n&quot;, sizeof(int));    printf(&quot;Smallest int: %d\\n&quot;, INT_MIN);    printf(&quot;Biggest int: %d\\n&quot;, INT_MAX);    printf(&quot;Biggest unsigned int: %u\\n\\n&quot;, UINT_MAX);    printf(&quot;long has a size of %zd bytes.\\n&quot;, sizeof(long));    printf(&quot;Smallest long: %ld\\n&quot;, LONG_MIN);    printf(&quot;Biggest long: %ld\\n&quot;, LONG_MAX);    printf(&quot;Biggest unsigned long: %lu\\n\\n&quot;, ULONG_MAX);    printf(&quot;long long has a size of %zd bytes.\\n&quot;, sizeof(long long));    printf(&quot;Smallest long long: %lld\\n&quot;, LLONG_MIN);    printf(&quot;Biggest long long: %lld\\n&quot;, LLONG_MAX);    printf(&quot;Biggest unsigned long long: %llu\\n\\n&quot;, ULLONG_MAX);    printf(&quot;float has a size of %zd bytes.\\n&quot;, sizeof(float));    printf(&quot;float s = %d bit, exp = %d bits, frac = %d bits.\\n&quot;, ONE, sizeof(float) * CHAR_BIT - FLT_MANT_DIG, FLT_MANT_DIG - 1);    printf(&quot;float min exponent = %d.\\n&quot;, FLT_MIN_EXP - 1);    printf(&quot;float max exponent = %d.\\n&quot;, FLT_MAX_EXP - 1);    printf(&quot;float precison = %d digits\\n&quot;, FLT_DIG);    printf(&quot;float epsilon = %.10E\\n&quot;, FLT_EPSILON);    printf(&quot;Smallest normal float: %.10E\\n&quot;, FLT_MIN);    printf(&quot;Largest normal float: %.10E\\n\\n&quot;, FLT_MAX);    printf(&quot;double has a size of %zd bytes.\\n&quot;, sizeof(double));    printf(&quot;double s = %d bit, exp = %d bits, frac = %d bits.\\n&quot;, ONE, sizeof(double) * CHAR_BIT - DBL_MANT_DIG, DBL_MANT_DIG - 1);    printf(&quot;double min exponent = %d.\\n&quot;, DBL_MIN_EXP - 1);    printf(&quot;double max exponent = %d.\\n&quot;, DBL_MAX_EXP - 1);    printf(&quot;double precison = %d digits\\n&quot;, DBL_DIG);    printf(&quot;double epsilon = %.10lE\\n&quot;, DBL_EPSILON);    printf(&quot;Smallest double: %.10lE\\n&quot;, DBL_MIN);    printf(&quot;Largest double: %.10lE\\n\\n&quot;, DBL_MAX);    printf(&quot;long double has a size of %zd bytes, but %d useful bits.\\n&quot;, sizeof(long double), SEVENTY_NINE); // wasteful but useful for some things such as alignment    printf(&quot;long double s = %d bit, exp = %d bits, frac = %d bits.\\n&quot;, ONE, FIFTEEN, LDBL_MANT_DIG - 1);    printf(&quot;long double min exponent = %d.\\n&quot;, LDBL_MIN_EXP - 1);    printf(&quot;long double max exponent = %d.\\n&quot;, LDBL_MAX_EXP - 1);    printf(&quot;long double precison = %d digits\\n&quot;, LDBL_DIG);    printf(&quot;long double epsilon = %.10LE\\n&quot;, LDBL_EPSILON);    printf(&quot;Smallest long double: %.10LE\\n&quot;, LDBL_MIN);    printf(&quot;Largest long double: %.10LE\\n\\n&quot;, LDBL_MAX);\t    printf(&quot;long double +12345.0L = 00000000 00000000 00000000 00000000 00000000 00000000 /0/1000000 00001100/ 1/1000000 11100100 00000000 00000000 00000000 00000000 00000000 00000000\\n&quot;);    printf(&quot;long double -12345.0L = 00000000 00000000 00000000 00000000 00000000 00000000 /1/1000000 00001100/ 1/1000000 11100100 00000000 00000000 00000000 00000000 00000000 00000000\\n&quot;);\t    system(&quot;pause&quot;);    return 0;&#125;\n//Program output on my (MinGW-W64 x86_64-posix-seh, built by Brecht Sanders) 11.2.0:One byte = 8 bits on this system.char has a size of 1 byte.Smallest char: -128Biggest char: 127Biggest unsigned char: 255short has a size of 2 bytes.Smallest short: -32768Biggest short: 32767Biggest unsigned short: 65535int has a size of 4 bytes.Smallest int: -2147483648Biggest int: 2147483647Biggest unsigned int: 4294967295long has a size of 4 bytes.Smallest long: -2147483648Biggest long: 2147483647Biggest unsigned long: 4294967295long long has a size of 8 bytes.Smallest long long: -9223372036854775808Biggest long long: 9223372036854775807Biggest unsigned long long: 18446744073709551615float has a size of 4 bytes.float s = 1 bit, exp = 8 bits, frac = 23 bits.float min exponent = -126.float max exponent = 127.float precison = 6 digitsfloat epsilon = 1.1920928955E-07Smallest normal float: 1.1754943508E-38Largest normal float: 3.4028234664E+38double has a size of 8 bytes.double s = 1 bit, exp = 11 bits, frac = 52 bits.double min exponent = -1022.double max exponent = 1023.double precison = 15 digitsdouble epsilon = 2.2204460493E-16Smallest double: 2.2250738585E-308Largest double: 1.7976931349E+308long double has a size of 16 bytes, but 79 useful bits.long double s = 1 bit, exp = 15 bits, frac = 63 bits.long double min exponent = -16382.long double max exponent = 16383.long double precison = 18 digitslong double epsilon = 1.0842021725E-19Smallest long double: 3.3621031431E-4932Largest long double: 1.1897314954E+4932long double +12345.0L = 00000000 00000000 00000000 00000000 00000000 00000000 /0/1000000 00001100/ 1/1000000 11100100 00000000 00000000 00000000 00000000 00000000 00000000long double -12345.0L = 00000000 00000000 00000000 00000000 00000000 00000000 /1/1000000 00001100/ 1/1000000 11100100 00000000 00000000 00000000 00000000 00000000 00000000"},{"title":"Code-Palace 各种数据类型的十六进制表示","url":"/2023/01/22/Code-Palace%20%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/","content":"\n选择数据类型并输入数字，输出在内存上对应的十六进制表示\n\n#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;ctype.h&gt;typedef unsigned char* byte_pointer;void char_out();void unsigned_char_out();void short_out();void unsigned_short_out();void int_out();void unsigned_int_out();void long_out();void unsigned_long_out();void long_long_out();void unsigned_long_long_out();void float_out();void double_out();void long_double_out();void print_question();void switch_data_type(char data_type);void show_bytes(byte_pointer start, size_t len);int main() &#123;    print_question();    char data_type;    while (scanf(&quot;%c&quot;, &amp;data_type)) &#123;        if (data_type == &#x27;q&#x27;)            return 0;        data_type = toupper(data_type);        printf(&quot;Now enter your number: &quot;);        switch_data_type(data_type);        print_question();        while (getchar() != &#x27;\\n&#x27;) &#123;&#125;    &#125;    return 0;&#125;void print_question() &#123;    printf(&quot;Please choose a data type:(q to quit)\\n&quot;);    printf(&quot;1)char      2)unsigned char\\n&quot;);    printf(&quot;3)short     4)unsigned short\\n&quot;);    printf(&quot;5)int       6)unsigned int\\n&quot;);    printf(&quot;7)long      8)unsigned long\\n&quot;);    printf(&quot;9)long long A)unsigned long long\\n&quot;);    printf(&quot;B)float     C)double\\n&quot;);    printf(&quot;D)long double\\n\\n&quot;);    printf(&quot;Enter your data type: &quot;);&#125;void show_bytes(byte_pointer start, size_t len) &#123;    size_t i;    printf(&quot;Your number is represented in hexadecimal:\\n\\n&quot;);    for (i = 0; i &lt; len; i++)        printf(&quot; %.2X&quot;, start[i]);    printf(&quot;\\n\\n&quot;);&#125;void switch_data_type(char data_type) &#123;    switch (data_type) &#123;    case &#x27;1&#x27;:        char_out();        break;    case &#x27;2&#x27;:        unsigned_char_out();        break;    case &#x27;3&#x27;:        short_out();        break;    case &#x27;4&#x27;:        unsigned_short_out();        break;    case &#x27;5&#x27;:        int_out();        break;    case &#x27;6&#x27;:        unsigned_int_out();        break;    case &#x27;7&#x27;:        long_out();        break;    case &#x27;8&#x27;:        unsigned_long_out();        break;    case &#x27;9&#x27;:        long_long_out();        break;    case &#x27;A&#x27;:        unsigned_long_long_out();        break;    case &#x27;B&#x27;:        float_out();        break;    case &#x27;C&#x27;:        double_out();        break;    case &#x27;D&#x27;:        long_double_out();        break;    default:        break;    &#125;    return;&#125;void char_out() &#123;    char number;    scanf(&quot;%hhd&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(char));&#125;void unsigned_char_out() &#123;    unsigned char number;    scanf(&quot;%hhu&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(unsigned char));&#125;void short_out() &#123;    short number;    scanf(&quot;%hd&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(short));&#125;void unsigned_short_out() &#123;    unsigned short number;    scanf(&quot;%hu&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(unsigned short));&#125;void int_out() &#123;    int number;    scanf(&quot;%d&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(int));&#125;void unsigned_int_out() &#123;    unsigned int number;    scanf(&quot;%u&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(unsigned int));&#125;void long_out() &#123;    long number;    scanf(&quot;%ld&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(long));&#125;void unsigned_long_out() &#123;    unsigned long number;    scanf(&quot;%lu&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(unsigned long));&#125;void long_long_out() &#123;    long long number;    scanf(&quot;%lld&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(long long));&#125;void unsigned_long_long_out() &#123;    unsigned long long number;    scanf(&quot;%llu&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(unsigned long long));&#125;void float_out() &#123;    float number;    scanf(&quot;%f&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(float));&#125;void double_out() &#123;    double number;    scanf(&quot;%lf&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(double));&#125;void long_double_out() &#123;    long double number;    scanf(&quot;%Lf&quot;, &amp;number);    show_bytes((byte_pointer)&amp;number, sizeof(long double));&#125;"},{"title":"Hello World","url":"/2023/01/22/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"}]